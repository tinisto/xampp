-- Migration script to run in 11klassniki_new database
-- This creates new tables and copies data from old imported tables

-- ========================================
-- 1. Create new universities table from vpo
-- ========================================
CREATE TABLE IF NOT EXISTS universities_new (
    id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    user_id INT(10) UNSIGNED NULL,
    parent_university_id INT(10) UNSIGNED NULL,
    university_name VARCHAR(191) NOT NULL,
    university_name_genitive VARCHAR(191) NOT NULL,
    full_name TEXT NOT NULL,
    short_name VARCHAR(191) NULL,
    old_names TEXT NULL,
    town_id INT(10) UNSIGNED NOT NULL,
    area_id INT(10) UNSIGNED NOT NULL,
    region_id INT(10) UNSIGNED NOT NULL,
    country_id INT(10) UNSIGNED NOT NULL,
    postal_code VARCHAR(10) NULL,
    street_address VARCHAR(191) NOT NULL,
    phone VARCHAR(191) NULL,
    fax VARCHAR(191) NULL,
    email VARCHAR(191) NULL,
    website VARCHAR(191) NULL,
    director_name VARCHAR(191) NULL,
    director_role VARCHAR(191) NULL,
    director_info TEXT NULL,
    director_email VARCHAR(191) NULL,
    director_phone VARCHAR(191) NULL,
    accreditation VARCHAR(191) NULL,
    license VARCHAR(191) NULL,
    founding_year YEAR(4) NULL,
    meta_description TEXT NULL,
    meta_keywords TEXT NULL,
    history TEXT NULL,
    url_slug VARCHAR(191) NULL,
    image_1 VARCHAR(191) NULL,
    image_2 VARCHAR(191) NULL,
    image_3 VARCHAR(191) NULL,
    vkontakte_url VARCHAR(191) NULL,
    view_count INT(10) UNSIGNED DEFAULT 0,
    is_approved BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    INDEX idx_university_name (university_name),
    INDEX idx_region (region_id),
    INDEX idx_town (town_id),
    INDEX idx_approved (is_approved),
    INDEX idx_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Copy data from vpo to universities_new
INSERT INTO universities_new (
    id, user_id, parent_university_id, university_name, university_name_genitive,
    full_name, short_name, old_names, town_id, area_id, region_id, country_id,
    postal_code, street_address, phone, fax, email, website,
    director_name, director_role, director_info, director_email, director_phone,
    accreditation, license, founding_year, meta_description, meta_keywords,
    history, url_slug, image_1, image_2, image_3, vkontakte_url,
    view_count, is_approved, updated_at
)
SELECT 
    id_vpo,
    user_id,
    CASE WHEN parent_vpo_id = 0 THEN NULL ELSE parent_vpo_id END,
    vpo_name,
    name_rod,
    full_name,
    short_name,
    old_name,
    id_town,
    id_area,
    id_region,
    id_country,
    zip_code,
    street,
    tel,
    fax,
    email,
    site,
    director_name,
    director_role,
    director_info,
    director_email,
    director_phone,
    accreditation,
    licence,
    year,
    meta_d_vpo,
    meta_k_vpo,
    history,
    vpo_url,
    image_vpo_1,
    image_vpo_2,
    image_vpo_3,
    vkontakte,
    view,
    approved,
    updated
FROM vpo;

-- ========================================
-- 2. Create new colleges table from spo
-- ========================================
CREATE TABLE IF NOT EXISTS colleges_new (
    id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    user_id INT(10) UNSIGNED NULL,
    parent_college_id INT(10) UNSIGNED NULL,
    college_name VARCHAR(191) NOT NULL,
    college_name_genitive VARCHAR(191) NOT NULL,
    full_name TEXT NOT NULL,
    short_name VARCHAR(191) NULL,
    old_names TEXT NULL,
    town_id INT(10) UNSIGNED NOT NULL,
    area_id INT(10) UNSIGNED NOT NULL,
    region_id INT(10) UNSIGNED NOT NULL,
    country_id INT(10) UNSIGNED NOT NULL,
    postal_code VARCHAR(10) NULL,
    street_address VARCHAR(191) NOT NULL,
    phone VARCHAR(191) NULL,
    fax VARCHAR(191) NULL,
    email VARCHAR(191) NULL,
    website VARCHAR(191) NULL,
    director_name VARCHAR(191) NULL,
    director_role VARCHAR(191) NULL,
    director_info TEXT NULL,
    director_email VARCHAR(191) NULL,
    director_phone VARCHAR(191) NULL,
    accreditation VARCHAR(191) NULL,
    license VARCHAR(191) NULL,
    founding_year YEAR(4) NULL,
    meta_description TEXT NULL,
    meta_keywords TEXT NULL,
    history TEXT NULL,
    url_slug VARCHAR(191) NULL,
    image_1 VARCHAR(191) NULL,
    image_2 VARCHAR(191) NULL,
    image_3 VARCHAR(191) NULL,
    vkontakte_url VARCHAR(191) NULL,
    view_count INT(10) UNSIGNED DEFAULT 0,
    is_approved BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    INDEX idx_college_name (college_name),
    INDEX idx_region (region_id),
    INDEX idx_town (town_id),
    INDEX idx_approved (is_approved),
    INDEX idx_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Copy data from spo to colleges_new
INSERT INTO colleges_new (
    id, user_id, parent_college_id, college_name, college_name_genitive,
    full_name, short_name, old_names, town_id, area_id, region_id, country_id,
    postal_code, street_address, phone, fax, email, website,
    director_name, director_role, director_info, director_email, director_phone,
    accreditation, license, founding_year, meta_description, meta_keywords,
    history, url_slug, image_1, image_2, image_3, vkontakte_url,
    view_count, is_approved, updated_at
)
SELECT 
    id_spo,
    user_id,
    CASE WHEN parent_spo_id = 0 THEN NULL ELSE parent_spo_id END,
    spo_name,
    name_rod,
    full_name,
    short_name,
    old_name,
    id_town,
    id_area,
    id_region,
    id_country,
    zip_code,
    street,
    tel,
    fax,
    email,
    site,
    director_name,
    director_role,
    director_info,
    director_email,
    director_phone,
    accreditation,
    licence,
    year,
    meta_d_spo,
    meta_k_spo,
    history,
    spo_url,
    image_spo_1,
    image_spo_2,
    image_spo_3,
    vkontakte,
    view,
    approved,
    updated
FROM spo;

-- ========================================
-- 3. Create new schools table
-- ========================================
CREATE TABLE IF NOT EXISTS schools_new (
    id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    user_id INT(10) UNSIGNED NULL,
    school_name VARCHAR(191) NOT NULL,
    full_name TEXT NULL,
    short_name VARCHAR(191) NULL,
    town_id INT(10) UNSIGNED NULL,
    area_id INT(10) UNSIGNED NOT NULL,
    region_id INT(10) UNSIGNED NOT NULL,
    country_id INT(10) UNSIGNED NOT NULL,
    street_address VARCHAR(191) NULL,
    phone VARCHAR(191) NULL,
    fax VARCHAR(191) NULL,
    email VARCHAR(191) NULL,
    website VARCHAR(191) NULL,
    director_name VARCHAR(191) NULL,
    director_role VARCHAR(191) NULL,
    director_info TEXT NULL,
    director_email VARCHAR(191) NULL,
    director_phone VARCHAR(191) NULL,
    founding_year YEAR(4) NULL,
    history TEXT NULL,
    logo_url VARCHAR(191) NULL,
    image_1 VARCHAR(191) NULL,
    image_2 VARCHAR(191) NULL,
    image_3 VARCHAR(191) NULL,
    view_count INT(10) UNSIGNED DEFAULT 0,
    is_approved BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    INDEX idx_school_name (school_name),
    INDEX idx_region (region_id),
    INDEX idx_town (town_id),
    INDEX idx_approved (is_approved),
    INDEX idx_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Copy data from schools to schools_new
INSERT INTO schools_new (
    id, user_id, school_name, full_name, short_name,
    town_id, area_id, region_id, country_id, street_address,
    phone, fax, email, website, director_name, director_role,
    director_info, director_email, director_phone, founding_year,
    history, logo_url, image_1, image_2, image_3,
    view_count, is_approved, updated_at
)
SELECT 
    id_school,
    user_id,
    school_name,
    full_name,
    short_name,
    CASE WHEN id_town = 0 THEN NULL ELSE id_town END,
    id_area,
    id_region,
    id_country,
    street,
    tel,
    fax,
    email,
    site,
    director_name,
    director_role,
    director_info,
    director_email,
    director_phone,
    year,
    history,
    logo,
    image_school_1,
    image_school_2,
    image_school_3,
    view,
    approved,
    updated
FROM schools;

-- ========================================
-- 4. Show results
-- ========================================
SELECT 'universities_new' as table_name, COUNT(*) as record_count FROM universities_new
UNION ALL
SELECT 'colleges_new', COUNT(*) FROM colleges_new
UNION ALL
SELECT 'schools_new', COUNT(*) FROM schools_new;