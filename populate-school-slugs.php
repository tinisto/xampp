<?php
require_once $_SERVER['DOCUMENT_ROOT'] . '/config/loadEnv.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/database/db_connections.php';

echo "<h1>Populate School URL Slugs</h1>";

// Include the slug generation function
function generateSchoolSlug($schoolName, $townName = '') {
    // Transliteration mapping
    $translitMap = [
        '–ê' => 'a', '–∞' => 'a', '–ë' => 'b', '–±' => 'b', '–í' => 'v', '–≤' => 'v',
        '–ì' => 'g', '–≥' => 'g', '–î' => 'd', '–¥' => 'd', '–ï' => 'e', '–µ' => 'e',
        '–Å' => 'yo', '—ë' => 'yo', '–ñ' => 'zh', '–∂' => 'zh', '–ó' => 'z', '–∑' => 'z',
        '–ò' => 'i', '–∏' => 'i', '–ô' => 'y', '–π' => 'y', '–ö' => 'k', '–∫' => 'k',
        '–õ' => 'l', '–ª' => 'l', '–ú' => 'm', '–º' => 'm', '–ù' => 'n', '–Ω' => 'n',
        '–û' => 'o', '–æ' => 'o', '–ü' => 'p', '–ø' => 'p', '–†' => 'r', '—Ä' => 'r',
        '–°' => 's', '—Å' => 's', '–¢' => 't', '—Ç' => 't', '–£' => 'u', '—É' => 'u',
        '–§' => 'f', '—Ñ' => 'f', '–•' => 'h', '—Ö' => 'h', '–¶' => 'ts', '—Ü' => 'ts',
        '–ß' => 'ch', '—á' => 'ch', '–®' => 'sh', '—à' => 'sh', '–©' => 'sch', '—â' => 'sch',
        '–™' => '', '—ä' => '', '–´' => 'y', '—ã' => 'y', '–¨' => '', '—å' => '',
        '–≠' => 'e', '—ç' => 'e', '–Æ' => 'yu', '—é' => 'yu', '–Ø' => 'ya', '—è' => 'ya'
    ];
    
    // Clean and normalize the school name
    $name = trim($schoolName);
    
    // Extract school type and number
    $slug = '';
    
    // Check for different school types
    if (preg_match('/—Å—Ä–µ–¥–Ω—è—è.*?–æ–±—â–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è.*?—à–∫–æ–ª–∞.*?‚Ññ?\s*(\d+)/iu', $name, $matches)) {
        $slug = 'sosh-' . $matches[1];
    } elseif (preg_match('/–≥–∏–º–Ω–∞–∑–∏—è.*?‚Ññ?\s*(\d+)/iu', $name, $matches)) {
        $slug = 'gimnazia-' . $matches[1];
    } elseif (preg_match('/–ª–∏—Ü–µ–π.*?‚Ññ?\s*(\d+)/iu', $name, $matches)) {
        $slug = 'licey-' . $matches[1];
    } elseif (preg_match('/–æ—Å–Ω–æ–≤–Ω–∞—è.*?—à–∫–æ–ª–∞.*?‚Ññ?\s*(\d+)/iu', $name, $matches)) {
        $slug = 'osh-' . $matches[1];
    } elseif (preg_match('/–Ω–∞—á–∞–ª—å–Ω–∞—è.*?—à–∫–æ–ª–∞.*?‚Ññ?\s*(\d+)/iu', $name, $matches)) {
        $slug = 'nash-' . $matches[1];
    } elseif (preg_match('/—à–∫–æ–ª–∞.*?‚Ññ?\s*(\d+)/iu', $name, $matches)) {
        $slug = 'school-' . $matches[1];
    } elseif (strpos($name, '–ª–∏—Ü–µ–π') !== false) {
        if (strpos($name, '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π') !== false) {
            $slug = 'licey-it';
        } elseif (strpos($name, '—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π') !== false) {
            $slug = 'licey-ekonom';
        } else {
            $slug = 'licey';
        }
    } elseif (strpos($name, '–≥–∏–º–Ω–∞–∑–∏—è') !== false) {
        $slug = 'gimnazia';
    } else {
        // Fallback: use first significant words
        $words = explode(' ', $name);
        $slug = strtolower($words[0]);
        if (isset($words[1]) && is_numeric($words[1])) {
            $slug .= '-' . $words[1];
        }
    }
    
    // Add city name if provided
    if (!empty($townName)) {
        $citySlug = $townName;
        
        // Extract city name from "–≥. Cityname" format
        if (preg_match('/–≥\.\s*(.+)/u', $citySlug, $matches)) {
            $citySlug = trim($matches[1]);
        }
        
        // Transliterate city name
        $citySlug = strtr($citySlug, $translitMap);
        $citySlug = strtolower($citySlug);
        $citySlug = preg_replace('/[^a-z0-9]+/', '', $citySlug);
        
        if (!empty($citySlug)) {
            $slug .= '-' . $citySlug;
        }
    }
    
    // Final cleanup
    $slug = strtr($slug, $translitMap);
    $slug = strtolower($slug);
    $slug = preg_replace('/[^a-z0-9-]/', '', $slug);
    $slug = preg_replace('/-+/', '-', $slug);
    $slug = trim($slug, '-');
    
    return $slug;
}

if (!isset($_POST['populate_slugs'])) {
    echo "<h2>Ready to populate URL slugs for all schools</h2>";
    echo "<p>This will generate friendly URLs for all schools in the database.</p>";
    
    // Show preview of first 10 schools
    $preview_query = "
        SELECT s.id, s.name, t.town_name 
        FROM schools s 
        LEFT JOIN towns t ON s.town_id = t.town_id 
        WHERE s.url_slug IS NULL OR s.url_slug = ''
        ORDER BY s.id 
        LIMIT 10
    ";
    
    $preview_result = $connection->query($preview_query);
    
    if ($preview_result && $preview_result->num_rows > 0) {
        echo "<h3>Preview (first 10 schools):</h3>";
        echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
        echo "<tr><th>ID</th><th>School Name</th><th>Town</th><th>Generated Slug</th></tr>";
        
        while ($row = $preview_result->fetch_assoc()) {
            $slug = generateSchoolSlug($row['name'], $row['town_name']);
            echo "<tr>";
            echo "<td>" . $row['id'] . "</td>";
            echo "<td>" . htmlspecialchars($row['name']) . "</td>";
            echo "<td>" . htmlspecialchars($row['town_name'] ?? 'N/A') . "</td>";
            echo "<td><code>" . $slug . "</code></td>";
            echo "</tr>";
        }
        echo "</table>";
    }
    
    // Count total schools without slugs
    $count_result = $connection->query("SELECT COUNT(*) as total FROM schools WHERE url_slug IS NULL OR url_slug = ''");
    $total = $count_result->fetch_assoc()['total'];
    
    echo "<p><strong>Total schools to process: {$total}</strong></p>";
    
    echo "<form method='post'>";
    echo "<p><input type='checkbox' required> I understand this will generate URL slugs for all schools</p>";
    echo "<button type='submit' name='populate_slugs' value='1' style='background: green; color: white; padding: 15px 30px; font-size: 18px; border: none;'>POPULATE SCHOOL SLUGS</button>";
    echo "</form>";
    
} else {
    echo "<h2>üîÑ Populating school URL slugs...</h2>";
    
    // Get all schools without slugs
    $query = "
        SELECT s.id, s.name, t.town_name 
        FROM schools s 
        LEFT JOIN towns t ON s.town_id = t.town_id 
        WHERE s.url_slug IS NULL OR s.url_slug = ''
        ORDER BY s.id
    ";
    
    $result = $connection->query($query);
    $processed = 0;
    $errors = 0;
    $duplicates = [];
    
    if ($result && $result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $slug = generateSchoolSlug($row['name'], $row['town_name']);
            
            // Check for duplicates and make unique
            $original_slug = $slug;
            $counter = 1;
            while (true) {
                $check_query = "SELECT id FROM schools WHERE url_slug = ? AND id != ?";
                $check_stmt = $connection->prepare($check_query);
                $check_stmt->bind_param("si", $slug, $row['id']);
                $check_stmt->execute();
                $check_result = $check_stmt->get_result();
                
                if ($check_result->num_rows == 0) {
                    break; // Slug is unique
                }
                
                $slug = $original_slug . '-' . $counter;
                $counter++;
                $check_stmt->close();
            }
            
            // Update the school with the slug
            $update_query = "UPDATE schools SET url_slug = ? WHERE id = ?";
            $update_stmt = $connection->prepare($update_query);
            $update_stmt->bind_param("si", $slug, $row['id']);
            
            if ($update_stmt->execute()) {
                echo "‚úÖ ID {$row['id']}: " . htmlspecialchars($row['name']) . " ‚Üí <code>{$slug}</code><br>";
                $processed++;
                
                if ($slug !== $original_slug) {
                    $duplicates[] = "Duplicate resolved: {$original_slug} ‚Üí {$slug}";
                }
            } else {
                echo "‚ùå ID {$row['id']}: Failed to update - " . $connection->error . "<br>";
                $errors++;
            }
            
            $update_stmt->close();
        }
    }
    
    echo "<h2>üìä Results:</h2>";
    echo "<p>‚úÖ Processed: {$processed}</p>";
    echo "<p>‚ùå Errors: {$errors}</p>";
    
    if (!empty($duplicates)) {
        echo "<h3>Duplicate slugs resolved:</h3>";
        foreach ($duplicates as $duplicate) {
            echo "<p>‚ö†Ô∏è {$duplicate}</p>";
        }
    }
    
    if ($errors == 0) {
        echo "<h2>üéâ SLUG POPULATION SUCCESSFUL!</h2>";
        echo "<p>All schools now have friendly URL slugs!</p>";
        echo "<p><strong>Next step:</strong> Update templates to use the new field names and URL routing.</p>";
    }
}
?>